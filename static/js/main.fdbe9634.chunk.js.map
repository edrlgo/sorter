{"version":3,"sources":["components/textbox/index.js","App.js","reportWebVitals.js","index.js"],"names":["Textbox","props","onClick","useState","text","setText","onButtonClick","lines","split","filter","x","join","value","onChange","e","target","rows","placeholder","className","disabled","length","array","App","firstItem","secondItem","items","setItems","itemList","setItemList","itemHistory","setItemHistory","rankingDone","setRankingDone","comparsions","setComparsions","maxComparsions","setMaxComparsions","addRank","useCallback","item","newItemList","findIndex","rank","haveCompared","history","find","add","remove","undefined","useEffect","init","sort","done","i","curRank","otherArr","a","j","compared","flag","itemAdd","itemRemove","addHistory","arr","newList","map","newHistory","push","Math","ceil","border","b","il","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdbe9634.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './index.css';\r\n\r\nconst Textbox = (props) => {\r\n    const { onClick } = props;\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    const lineCount = () => {\r\n        const lines = text.split(/\\r*\\n/).filter(x => x !== '');\r\n\r\n        return lines.length;\r\n    };\r\n\r\n    const onButtonClick = () => {\r\n        const lines = text.split(/\\r*\\n/).filter(x => x !== '');\r\n\r\n        onClick(lines.join('\\n'));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <textarea \r\n                value={text} \r\n                onChange={e => setText(e.target.value)} \r\n                rows={10} \r\n                placeholder={\"Add your own items here... (seperate with lines)\"} \r\n            />\r\n\r\n            <button className=\"start-button\" disabled={lineCount() < 2} onClick={() => onButtonClick()}>\r\n                Start ranking\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Textbox;","import React, { useEffect, useState, useCallback } from 'react';\r\nimport './App.css';\r\nimport Textbox from './components/textbox';\r\n\r\nconst array = [\r\n    \"Belarus\",\r\n    \"France\",\r\n    \"Georgia\",\r\n    \"Germany\",\r\n    \"Kazakhstan\",\r\n    \"Malta\",\r\n    \"Netherlands\",\r\n    \"Poland\",\r\n    \"Russia\",\r\n    \"Serbia\",\r\n    \"Spain\",\r\n    \"Ukraine\"\r\n];\r\n\r\nconst App = () => {\r\n    const [items, setItems] = useState({\r\n        firstItem: \"\",\r\n        secondItem: \"\"\r\n    });\r\n\r\n    const [itemList, setItemList] = useState([]);\r\n    const [itemHistory, setItemHistory] = useState([]);\r\n    const [rankingDone, setRankingDone] = useState(false);\r\n    const [comparsions, setComparsions] = useState(0);\r\n    const [maxComparsions, setMaxComparsions] = useState(0);\r\n\r\n    const addRank = useCallback((item) => {\r\n        let newItemList = [...itemList];\r\n        const itemAddIndex = itemList.findIndex(x => x.item === item);\r\n\r\n        newItemList[itemAddIndex].rank++;\r\n\r\n        setComparsions(comparsions + 1);\r\n        setItemList(newItemList);\r\n    }, [comparsions, itemList]);\r\n\r\n    const haveCompared = useCallback((firstItem, secondItem) => {\r\n        let history = itemHistory.find(x => \r\n            (x.add === firstItem && x.remove === secondItem) || \r\n            (x.add === secondItem && x.remove === firstItem)\r\n        );\r\n\r\n        if (history !== undefined) {\r\n            return [true, history.add];\r\n        }\r\n\r\n        return [false, \"\"];\r\n    }, [itemHistory]);\r\n\r\n    useEffect(() => {\r\n        init(array.sort());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let firstItem = \"\", secondItem = \"\";\r\n        let done = false;\r\n\r\n        for (let i = 0; i < itemList.length; i++) {\r\n            const curRank = itemList[i].rank;\r\n            const otherArr = itemList.filter(a => a !== itemList[i]);\r\n            firstItem = itemList[i].item;\r\n            \r\n            for (let j = 0; j < otherArr.length; j++) {\r\n                if (otherArr[j].rank === curRank) {\r\n                    secondItem = otherArr[j].item;\r\n\r\n                    let compared = haveCompared(firstItem, secondItem);\r\n\r\n                    if (compared[0]) {\r\n                        addRank(compared[1]);\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (secondItem !== \"\") {\r\n                done = false;\r\n                break;\r\n            }\r\n\r\n            done = true;\r\n        }\r\n\r\n        setRankingDone(done);\r\n\r\n        setItems({\r\n            firstItem: done ? items.firstItem : firstItem,\r\n            secondItem: done ? items.secondItem : secondItem\r\n        });\r\n    }, [addRank, haveCompared, itemList, items.firstItem, items.secondItem]);\r\n\r\n    const onClick = (flag) => {\r\n        let itemAdd = flag === 0 ? items.firstItem : items.secondItem;\r\n        let itemRemove = flag === 0 ? items.secondItem : items.firstItem;\r\n\r\n        addRank(itemAdd);\r\n        addHistory(itemAdd, itemRemove);\r\n    };\r\n\r\n    const init = (arr) => {\r\n        const newList = arr.map(x => {\r\n            return {\r\n                item: x,\r\n                rank: 0\r\n            };\r\n        });\r\n\r\n        setComparsions(0);\r\n        setMaxComparsions((newList.length * (newList.length - 1)) / 2);\r\n        setItemList(newList);\r\n        setItemHistory([]);\r\n    };\r\n\r\n    const addHistory = (itemAdd, itemRemove) => {\r\n        let newHistory = [...itemHistory];\r\n\r\n        newHistory.push({\r\n            add: itemAdd,\r\n            remove: itemRemove\r\n        });\r\n\r\n        setItemHistory(newHistory);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Sorter</h1>\r\n\r\n            <Textbox onClick={e => init(e.split(/\\r*\\n/).sort())} />\r\n\r\n            <p>Approx. {Math.ceil((comparsions / maxComparsions) * 100)}% done</p>\r\n\r\n            <button onClick={() => onClick(0)} disabled={rankingDone} className=\"choose-button\">\r\n                {items.firstItem}\r\n            </button>\r\n\r\n            <button onClick={() => onClick(1)} disabled={rankingDone} className=\"choose-button\">\r\n                {items.secondItem}\r\n            </button>\r\n\r\n            <div className={rankingDone ? 'show' : 'hide'}>\r\n                <table border=\"1\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Item</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        itemList.sort((a, b) => b.rank - a.rank).map((il, i) => (\r\n                            <tr key={i}>\r\n                                <td>{i + 1}</td>\r\n                                <td>{il.item}</td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n\r\n                <button className=\"reset-button\" onClick={() => init(array.sort())}>\r\n                    Reset\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}