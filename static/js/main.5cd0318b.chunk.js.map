{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["array","App","useState","firstItem","secondItem","items","setItems","itemList","setItemList","itemHistory","setItemHistory","rankingDone","setRankingDone","addRank","useCallback","item","newItemList","findIndex","x","rank","haveCompared","undefined","find","add","remove","useEffect","init","sort","done","i","curRank","otherArr","filter","a","j","length","onClick","flag","itemAdd","itemRemove","addHistory","arr","newList","map","newHistory","push","className","e","disabled","border","b","il","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cd0318b.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport './App.css';\r\n\r\nconst array = [\r\n    \"Armenia\",\r\n    \"Belarus\",\r\n    \"France\",\r\n    \"Georgia\",\r\n    \"Germany\",\r\n    \"Kazakhstan\",\r\n    \"Malta\",\r\n    \"Netherlands\",\r\n    \"Poland\",\r\n    \"Russia\",\r\n    \"Serbia\",\r\n    \"Spain\",\r\n    \"Ukraine\"\r\n];\r\n\r\nconst App = () => {\r\n    const [items, setItems] = useState({\r\n        firstItem: \"\",\r\n        secondItem: \"\"\r\n    });\r\n\r\n    const [itemList, setItemList] = useState([]);\r\n    const [itemHistory, setItemHistory] = useState([]);\r\n    const [rankingDone, setRankingDone] = useState(false);\r\n\r\n    const addRank = useCallback((item) => {\r\n        let newItemList = [...itemList];\r\n        const itemAddIndex = itemList.findIndex(x => x.item === item);\r\n\r\n        newItemList[itemAddIndex].rank++;\r\n\r\n        setItemList(newItemList);\r\n    }, [itemList]);\r\n\r\n    const haveCompared = useCallback((firstItem, secondItem) => {\r\n        let history = itemHistory.find(x => \r\n            (x.add === firstItem && x.remove === secondItem) || \r\n            (x.add === secondItem && x.remove === firstItem)\r\n        );\r\n\r\n        if (history !== undefined) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }, [itemHistory]);\r\n\r\n    useEffect(() => {\r\n        init(array.sort());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let firstItem = \"\", secondItem = \"\";\r\n        let done = false;\r\n\r\n        for (let i = 0; i < itemList.length; i++) {\r\n            const curRank = itemList[i].rank;\r\n            const otherArr = itemList.filter(a => a !== itemList[i]);\r\n            firstItem = itemList[i].item;\r\n            \r\n            for (let j = 0; j < otherArr.length; j++) {\r\n                if (otherArr[j].rank === curRank) {\r\n                    secondItem = otherArr[j].item;\r\n\r\n                    let compared = haveCompared(firstItem, secondItem);\r\n\r\n                    if (compared) {\r\n                        addRank(firstItem);\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (secondItem !== \"\") {\r\n                done = false;\r\n                break;\r\n            }\r\n\r\n            done = true;\r\n        }\r\n\r\n        setRankingDone(done);\r\n\r\n        setItems({\r\n            firstItem: done ? items.firstItem : firstItem,\r\n            secondItem: done ? items.secondItem : secondItem\r\n        });\r\n    }, [addRank, haveCompared, itemList, items.firstItem, items.secondItem]);\r\n\r\n    const onClick = (flag) => {\r\n        let itemAdd = flag === 0 ? items.firstItem : items.secondItem;\r\n        let itemRemove = flag === 0 ? items.secondItem : items.firstItem;\r\n\r\n        addRank(itemAdd);\r\n        addHistory(itemAdd, itemRemove);\r\n    };\r\n\r\n    const init = (arr) => {\r\n        const newList = arr.map(x => {\r\n            return {\r\n                item: x,\r\n                rank: 0\r\n            };\r\n        });\r\n\r\n        setItemList(newList);\r\n        setItemHistory([]);\r\n    };\r\n\r\n    const addHistory = (itemAdd, itemRemove) => {\r\n        let newHistory = [...itemHistory];\r\n\r\n        newHistory.push({\r\n            add: itemAdd,\r\n            remove: itemRemove\r\n        });\r\n\r\n        setItemHistory(newHistory);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Sorter</h1>\r\n\r\n            <button onClick={(e) => onClick(0)} disabled={rankingDone} className=\"choose-button\">\r\n                {items.firstItem}\r\n            </button>\r\n\r\n            <button onClick={(e) => onClick(1)} disabled={rankingDone} className=\"choose-button\">\r\n                {items.secondItem}\r\n            </button>\r\n\r\n            <div className={rankingDone ? 'show' : 'hide'}>\r\n                <table border=\"1\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Item</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        itemList.sort((a, b) => b.rank - a.rank).map((il, i) => (\r\n                            <tr key={i}>\r\n                                <td>{i + 1}</td>\r\n                                <td>{il.item}</td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n\r\n                <button className=\"reset-button\" onClick={() => init(array.sort())}>\r\n                    Reset\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}